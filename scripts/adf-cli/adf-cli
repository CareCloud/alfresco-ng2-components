#!/usr/bin/env bash
set -e
CLIDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. $CLIDIR/.cli-variables
. $CLIDIR/.cli-helpers

show_help() {
    local green; local yellow; local white; local bold; local reset;
    green=`tput setaf 2`
    yellow=`tput setaf 3`
    white=`tput setaf 7`
    bold=`tput bold`
    reset=`tput sgr0`
    
    echo "${green}"
    cat $CLIDIR/.header
    echo "${reset}"
    
    echo "${white}${bold}Usage: adf[f][f] command [command options, like component name or jsapi gitish]${reset}"
    echo ""
    echo "Commands:"
    echo "${yellow}build${reset}      - build package(s)"
    echo "${yellow}debug ${reset}     - run package test in browser to be able to debug"
    echo "${yellow}demo${reset}       - start demo shell with local components and development gitjsapi"
    echo "${yellow}dir${reset}        - show absolute path for: <component>|demo|scripts"
    echo "${yellow}help${reset}       - show this help"
    echo "${yellow}list${reset}       - show available entries"
    echo "${yellow}test${reset}       - test package(s)"

    local output;
    output=""

    echo ""
    echo "${yellow}Command aliases${reset}"

    output="$output${white}${bold}adf$SCRIPTS${reset}|cd to $SCRIPTS directory\n"
    output="$output${white}${bold}adf$COMPONENTS_DIRNAME${reset}|cd to $COMPONENTS_DIRNAME directory\n"
    output="$output${white}${bold}adf$DEMOSHELL${reset}|cd to $DEMOSHELL directory\n"

    for component in "${COMPONENTS[@]}"
    do
        local componentRealName
        componentRealName=`_get_component_real_name $component`
        output="$output${white}${bold}adf$component${reset}|cd to $componentRealName directory\n"
    done    
    echo -ne $output | column -t -s "|"    
}

show_path() {
    if ( _is_component $1 == true ); then
        local component=`_get_component $1`
        echo `_beautify_directory_name $COMPONENTSDIR/$component`
    elif [ "$1" == $COMPONENTS_DIRNAME ]; then
        echo `_beautify_directory_name $COMPONENTSDIR`        
    elif [ "$1" == $DEMOSHELL ]; then
        echo `_beautify_directory_name $DEMOSHELLDIR`
    elif [ "$1" == $SCRIPTS ]; then
        echo `_beautify_directory_name $SCRIPTSDIR`
    else
        echo "Directory can't be found for: $1" >&2
        exit 1
    fi
}

show_ls() {
    local yellow; local white; local bold; local reset;
    yellow=`tput setaf 3`
    white=`tput setaf 7`
    bold=`tput bold`    
    reset=`tput sgr0`

    echo ""
    echo "${yellow}Components${reset}"
    for component in "${COMPONENTS[@]}"
    do
        echo "$component"
    done
    
    echo ""
    echo "${yellow}Directories${reset}"
    echo "$SCRIPTS"
    echo "$DEMOSHELL"
}

run_demo() {
    local boost;
    boost=`_get_boost_for_demo $SPEED`;

    $SCRIPTSDIR/start.sh $boost -dev -gitjsapi development
}

run_build() {
    local component; local gitish; local boost;
    component=`_get_component $1`; shift;
    gitish=`_get_jsapi $1`;
    boost=`_get_boost $SPEED`;

    $SCRIPTSDIR/npm-build-all.sh $boost $component $gitish
}

run_tests() {
    set -e
    local component; local gitish; local boost;
    component=`_get_component $1`; shift;
    gitish=`_get_jsapi $1`;
    boost=`_get_boost $SPEED`;

    $SCRIPTSDIR/npm-build-all.sh $boost -t $component $gitish
}

run_browser_tests() {
    set -e
    local component; local gitish; local boost;
    component=`_get_component $1`; shift;
    gitish=`_get_jsapi $1`;
    boost=`_get_boost $SPEED`;

    $SCRIPTSDIR/npm-build-all.sh $boost -tb $component $gitish
}

case "$1" in
    build) shift; run_build "$@"; exit 0;;
    debug) shift; run_browser_tests "$@"; exit 0;;
    demo) shift; run_demo "$@"; exit 0;;
    dir) shift; show_path "$@"; exit 0;;
    help) show_help; exit 0;;
    list) show_ls; exit 0;;
    test) shift; run_tests "$@"; exit 0;;
    *) echo "invalid command $1" 1>&2; show_help; exit 1;;
esac
